// <auto-generated />
using System;
using Analyzer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Analyzer.Data.Migrations
{
    [DbContext(typeof(DevOpsContext))]
    [Migration("20221124223756_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Analyzer.Data.Commit", b =>
                {
                    b.Property<byte[]>("Sha")
                        .HasMaxLength(20)
                        .HasColumnType("varbinary(20)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AuthorTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CommitTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CommiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PushId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Sha");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CommiterId");

                    b.HasIndex("PushId");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("Sha")
                        .IsUnique();

                    b.ToTable("Commits");
                });

            modelBuilder.Entity("Analyzer.Data.Identity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DevOpsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DevOpsId")
                        .IsUnique()
                        .HasFilter("[DevOpsId] IS NOT NULL");

                    b.HasIndex("UniqueName")
                        .IsUnique();

                    b.ToTable("Identities");
                });

            modelBuilder.Entity("Analyzer.Data.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DevOpsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organisation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DevOpsId")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Analyzer.Data.PullRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ClosedTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DevOpsId")
                        .HasColumnType("int");

                    b.Property<byte[]>("MergeCommitSha")
                        .HasColumnType("varbinary(20)");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DevOpsId")
                        .IsUnique();

                    b.HasIndex("MergeCommitSha");

                    b.HasIndex("RepositoryId");

                    b.ToTable("PullRequests");
                });

            modelBuilder.Entity("Analyzer.Data.Push", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DevOpsId")
                        .HasColumnType("int");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DevOpsId")
                        .IsUnique();

                    b.HasIndex("IdentityId");

                    b.ToTable("Pushes");
                });

            modelBuilder.Entity("Analyzer.Data.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DevOpsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DevOpsId")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("Analyzer.Data.Commit", b =>
                {
                    b.HasOne("Analyzer.Data.Identity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analyzer.Data.Identity", "Commiter")
                        .WithMany()
                        .HasForeignKey("CommiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analyzer.Data.Push", null)
                        .WithMany("Commits")
                        .HasForeignKey("PushId");

                    b.HasOne("Analyzer.Data.Repository", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Commiter");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Analyzer.Data.PullRequest", b =>
                {
                    b.HasOne("Analyzer.Data.Commit", "MergeCommit")
                        .WithMany()
                        .HasForeignKey("MergeCommitSha");

                    b.HasOne("Analyzer.Data.Repository", "Repository")
                        .WithMany()
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MergeCommit");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Analyzer.Data.Push", b =>
                {
                    b.HasOne("Analyzer.Data.Identity", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Identity");
                });

            modelBuilder.Entity("Analyzer.Data.Repository", b =>
                {
                    b.HasOne("Analyzer.Data.Project", "Project")
                        .WithMany("Repositories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Analyzer.Data.Project", b =>
                {
                    b.Navigation("Repositories");
                });

            modelBuilder.Entity("Analyzer.Data.Push", b =>
                {
                    b.Navigation("Commits");
                });
#pragma warning restore 612, 618
        }
    }
}
